---
import Layout from "@layouts/Layout.astro";
import Main from "@layouts/Main.astro";
import ToggleThemeBtn from "@components/ToggleThemeBtn.astro";
import { getCollection } from "astro:content";
import formatDate from "@utils/getFormatDate";

export async function getStaticPaths() {
  const posts = await getCollection("posts", ({ data }) => !data.draft);

  const postResult = posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));

  return [...postResult];
}

const { post } = Astro.props;
const { Content } = await post.render();
---

<Layout
  title={post.data.title}
  description={post.data.description || post.data.title}
>
  <div class="max-w-2xl mx-auto px-4 sm:pt-14 sm:px-0">
    <div class="flex justify-end py-5 sm:fixed sm:top-0 sm:right-0 sm:p-5">
      <ToggleThemeBtn />
    </div>
    <section class="pb-20">
      <h1
        class="relative flex items-center text-3xl text-skin-base font-semibold mb-5"
        transition:name={post.data.title}
      >
        <svg
          class="absolute top-[-40px] sm:left-[-40px] sm:top-auto cursor-pointer"
          xmlns="http://www.w3.org/2000/svg"
          width="1em"
          height="1em"
          viewBox="0 0 24 24"
          onclick="(() => (history.length === 1) ? window.location = '/' : history.back())()"
        >
          <path
            fill="currentColor"
            d="m4 10l-.707.707L2.586 10l.707-.707zm17 8a1 1 0 1 1-2 0zM8.293 15.707l-5-5l1.414-1.414l5 5zm-5-6.414l5-5l1.414 1.414l-5 5zM4 9h10v2H4zm17 7v2h-2v-2zm-7-7a7 7 0 0 1 7 7h-2a5 5 0 0 0-5-5z"
          ></path>
        </svg>

        {post.data.title}
      </h1>
      <p class="mb-10 opacity-80">
        <span transition:name={formatDate(post.data.pubDate)}
          >{formatDate(post.data.pubDate)}</span
        >
        {
          post.data.modDate ? (
            <span class="ml-11">
              <i class="text-sm opacity-60">update: </i>
              {formatDate(post.data.modDate)}
            </span>
          ) : (
            ""
          )
        }
      </p>
      <article class="prose">
        <Content />
      </article>
    </section>
  </div>
</Layout>

<script is:inline>
  function attachCopyButtons() {
    let copyButtonLabel = "Copy";
    let codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (let codeBlock of codeBlocks) {
      let wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      let copyButton = document.createElement("button");
      copyButton.className =
        "copy-code absolute right-3 -top-3 rounded bg-skin-card px-2 py-1 text-xs leading-4 text-skin-base font-medium";
      copyButton.innerHTML = copyButtonLabel;
      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);

      // wrap codebock with relative parent element
      codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      let code = block.querySelector("code");
      let text = code?.innerText;

      await navigator.clipboard.writeText(text ?? "");

      // visual feedback that task is completed
      button.innerText = "Copied";

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  }
  attachCopyButtons();
</script>
